#--------------------------------------------
# A function to create binary search tree.
#--------------------------------------------
from collections import deque

class Queue():
    def __init__(self):
        self.q = deque([])
    def enque(self, item):
        self.q.appendleft(item)
    def dequeue(self):
        if not self.isEmpty():
            return self.q.pop()
    def isEmpty(self):
        return False if len(self.q) > 0 else True
    def __repr__(self):
        for item in self.q:
            print item
            
class Node():
    def __init__(self, value):
        self.value = value
        self.left = self.right = None

def insert_node_into_tree(node, value):
    if not node: # If node is empty
        node = Node(value)
    else:
        if value <= node.value: # Insert into left of node
            node.left = insert_node_into_tree(node.left, value)
        else: # Insert into right of node
            node.right = insert_node_into_tree(node.right, value)
    return node
 
def preorder(node):
    """
    Function for preorder traversal of binary search tree
    """
    print node.value,
    if node.left:
        preorder(node.left)
    if node.right:
        preorder(node.right)
        
def height(root):
"""
1. If tree is empty then return 0
2. Else
     (a) Get the max depth of left subtree recursively  i.e., 
          call maxDepth( tree->left-subtree)
     (a) Get the max depth of right subtree recursively  i.e., 
          call maxDepth( tree->right-subtree)
     (c) Get the max of max depths of left and right 
          subtrees and add 1 to it for the current node.
         max_depth = max(max dept of left subtree,  
                             max depth of right subtree) 
                             + 1
     (d) Return max_depth
"""
    if root == None:
        return 0
    else:
        if root.left == None and root.right == None:
            return max(height(root.left), height(root.right))
        else:
            return max(height(root.left), height(root.right))+1
            
 def levelOrder():
 """
 Function for level order traversal
 Step 1) Create an empty queue q
 Step 2) temp_node = root /* start from root node */
 Step 3) Loop while temp_node is not NULL
         a) print temp_node->data.
         b) Enqueue temp_node’s children (first left then right children) to q
         c) Dequeue a node from q and assign it’s value to temp_node
 """
 q = Queue()
 tempNode = root
 while(tempNode):
    print tempNode.data,
    if tempNode.left:
        q.enque(tempNode.left)
    if tempNode.right:
        q.enque(tempNode.right)
    tempNode = q.dequeue()
        
if __name__ == "__main__":
    # Create a tree
    node_values = [10,40,20,30,10]
    rootNode = None
    for value in node_values:
        rootNode = insert_node_into_tree(rootNode, value)
    preorder(rootNode)
